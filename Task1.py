# -*- coding: utf-8 -*-
"""Copy of CrediteCard_Fraud

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vvc-8B0R3JZW2rkK2WrWsgvC0F_luz3x
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# loading the dataset to a Pandas dataframe
credit_card_data = pd.read_csv('creditcard.csv')

#first 5 row of the data
credit_card_data.head()

#last 5 rows
credit_card_data.tail()

#dataset information
credit_card_data.info()

#checking the number of missing values in each col
credit_card_data.isnull().sum()

# distribution of legit transaction & fraudulent transactions
credit_card_data['Class'].value_counts()

"""This Dataset is highly unbalanced

0 -->Normal Transaction   


1 -->Fraudulent Transaction
"""

# separating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# staistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# compare the value for both transcation
credit_card_data.groupby('Class').mean()

"""Under-sampling

Build a sample dataset containing similar distribution of normal transactions and Fraudulent transactions

No of Fraudulent Transcations-->492
"""

legit_sample = legit.sample(n=492)

"""concatenating two DataFrame"""

new_dataset = pd.concat([legit_sample, fraud], axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the data into Features & Tragets"""

x = new_dataset.drop(columns = 'Class', axis=1)
y = new_dataset['Class']

print(x)

print(y)

"""Split the data into Training data & Testing data"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Model Training

logistic Regression
"""

from sklearn.linear_model import LogisticRegression # imports the LogisticRegression class from the sklearn.linear_model module

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(x_train, y_train)

"""Model Evaluation

Accuracy Score
"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(x_train, y_train)

# accuracy on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on training data :',training_data_accuracy)

# accuracy on training data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data :',test_data_accuracy)